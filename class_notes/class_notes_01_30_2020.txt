Today is 01/30/2020

	Some review:

		we will use Spartan.
		POST, GET
		build POJO

	after lunch break

		DELETE
		PUT

####################################################


Explore spartan app on your ec2(cybertek_instance). Just enter host address of ec2 + :8000 as port number.


If you don't have ec2, please use mine:
App: http://ec2-34-201-69-55.compute-1.amazonaws.com:8000
Swagger doc: http://ec2-34-201-69-55.compute-1.amazonaws.com:8000/swagger-ui.html#/

variable name: baseUrl
variable value: http://ec2-34-201-69-55.compute-1.amazonaws.com:8000

	baseUrl+/api/spartans | end point, and this one returns list of users

 * Since the content-type is "application/json" then REST Assured will automatically try to serialize the object using

     * <a href="https://github.com/FasterXML/jackson">Jackson</a> or <a href="https://github.com/google/gson">Gson</a> if they are
     * available in the classpath. If any of these frameworks are not in the classpath then an exception is thrown.
     * <br />
     * If the content-type is "application/xml" then REST Assured will automatically try to serialize the object using <a href="http://jaxb.java.net/">JAXB</a>
     * if it's available in the classpath. Otherwise an exception will be thrown.
     * <br />
     * If no request content-type is specified then REST Assured determine the parser in the following order:
     * <ol>
     * <li>Jackson</li>
     * <li>Gson</li>
     * <li>JAXB</li>
     * </ol>
     * <p>
     *
     * @param object The object to serialize and send with the request
     * @return The request specification
     */

 	 * given().
     *         contentType("application/json").
     *         body(message).
     * when().
     *         post("/beautiful-message").
     * then().
     *         body(equalTo("Response to a beautiful message")).


Before: [451, 450, 446, 445, 444, 443, 442, 441, 440, 439, 438, 436, 435, 428, 427, 426, 425, 424, 423, 396, 395, 394, 392, 391, 388, 385, 384, 381, 379, 378, 377, 374, 373, 370, 369, 367, 366, 364, 363, 362, 361, 360, 359, 358, 357, 355, 351, 350, 349, 348, 347, 345, 343, 342, 341, 340, 339, 337, 335, 334, 333, 332, 331, 328, 327, 325, 323, 321, 320, 319, 318, 317, 315, 311, 309, 308, 307, 304, 303, 302, 264, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 245, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 227, 226, 225, 224, 222, 221, 220, 219, 218, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 197, 196, 195, 194, 193, 192, 191, 190, 189, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 165, 159, 158, 157, 156, 155, 154, 147, 132, 117, 116, 115, 113, 109, 108, 104, 103, 102, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 42, 41, 39, 38, 37, 36, 35, 33, 30, 29, 28, 27, 26, 25, 24, 22]

After: 500 Server error

new server link: http://ec2-3-81-4-150.compute-1.amazonaws.com:8000/

Interview question: How do you generate test data?


	I can use Faker library and If I need to add it to the application, I can perform API call to the web service to add it.

	I can easily inject as much as I need test data.

	Just by surrounding POST request with for loop.

	Or we can get the data from excel file, and add it as well via API.


public class SpartanTests {

    @BeforeAll
    public static void setup() {
        baseURI = ConfigurationReader.getProperty("spartan.uri");
    }

    /**
     * given accept content type as JSON
     * when user sends GET request to /spartans
     * then user verifies that status code is 200
     * and user verifies that content type is JSON
     */

    @Test
    @DisplayName("Verify that /spartans end-point returns 200 and content type as JSON")
    public void test1() {
        //web service may return different content type
        //and to request JSON, you can just put in the given part  ContentType.JSON
        //If you want to ask for XML, you can put ContentType.XML
        //but, if web service configured only for JSON
        //it will not give you anything else
        //GET, PUT, POST, DELETE, etc. - HTTP verbs or methods
        //GET - to get the data from web service
        //PUT - update existing record
        //DELETE - delete something, like delete spartan
        //PATCH - partial update of existing record
        given().
                accept(ContentType.JSON).
        when().
                get("/spartans").prettyPeek().
        then().assertThat().
                statusCode(200).
                contentType(ContentType.JSON);

    }


    /**
     * TASK
     * given accept content type as XML
     * when user sends GET request to /spartans
     * then user verifies that status code is 200
     * and user verifies that content type is XML
     */
    @Test
    @DisplayName("Verify that /spartans end-point returns 200 and content type as XML")
    public void test2() {
        //asking
        //accept(ContentType.XML). <- you are asking for payload format as XML from web service
        //receiving
        //contentType(ContentType.XML) <- you are verifying that payload's format is XML
        given().
                accept(ContentType.XML).
                when().
                get("/spartans").prettyPeek().
                then().assertThat().
                statusCode(200).
                contentType(ContentType.XML);

    }

    /**
     * TASK
     * given accept content type as JSON
     * when user sends GET request to /spartans
     * then user saves payload into collection
     *
     * ###################
     * We can convert payload (JSON body for example) into collection.
     * if it's a single variable: "name" : "James", we acn store in String or List<String>
     * If, there multiple names in the payload, we cannot use single String as a storage
     * instead, use List<String>
     * If payload returns object:
     *  {
     *  "name": "James"
     *  "age" 25
     *  }
     *  Then, we can store this object (on our, java side, as POJO or Map<String, ?>)
     *  If it's a POJO, we need to create corresponding POJO class, in order to map properties
     *  from json and java object:
     *          Java class         JSON file
     *      private String name |  "name"
     *      private int age     |  "age"
     *
     *      If you want to use different variable name in Java class, use @SerializedName annotation
     *
     *          Java class            JSON file
     *      @SerializedName("name")
     *      private String firstName |  "name"
     *      private int age          |  "age"
     *
     *      otherwise,  Gson, jackson, or any other Json parser, will not be able to map properties correctly.
     *      Serialization - from POJO (java object) to stream of bytes, let's say to JSON
     *      Deserialization - from stream of bytes, let's say JSON into POJO (java object)
     *
     *      If payload returns array ob objects:
     *
     *
     *          [
     *              {
     *                  "id": 202,
     *                  "name": "Helen Highwater",
     *                  "gender": "Female",
     *                  "phone": 60242012223
     *              },
     *              {
     *                  "id": 203,
     *                  "name": "Ellie Noise",
     *                  "gender": "Female",
     *                  "phone": 37812781233
     *              },
     *          ]
     *
     *          Then we can store this payload as List<Map<?, ?>>>
     *          or like list of POJO's List<Spartan>
     *
     */
    @Test
    @DisplayName("Save payload into java collection")
    public void test3() {
        Response response = given().
                contentType(ContentType.JSON).
                when().
                get("/spartans");

        List<Map<String, ?>> collection = response.jsonPath().get();

        for (Map<String, ?> map : collection) {
            System.out.println(map);
        }
    }

    /**
     * TASK
     * given accept content type as JSON
     * when user sends GET request to /spartans
     * then user saves payload into collection of Spartan
     */

    @Test
    @DisplayName("Save payload into java collection of Spartan")
    public void test4() {
        Response response = given().
                contentType(ContentType.JSON).
                when().
                get("/spartans").prettyPeek();
        //whenever you see: Class object = response.jsonPath.getObject() | deserialization
        List<Spartan> collection = response.jsonPath().getList("", Spartan.class);

        for (Spartan spartan : collection) {
            System.out.println(spartan);
        }
    }

    /**
     * TASK
     * given accept content type as JSON
     * when user sends POST request to /spartans
     * and user should be able to create new spartan
     * |gender|name           |phone     |
     * | male |Mister Twister |5712134235|
     * then user verifies that status code is 201
     * <p>
     * 201 - means created. Whenever you POST something, you should get back 201 status code
     * in case of created record
     */

    @Test
    @DisplayName("Create new spartan and verify that status code is 201")
    public void test5() {
        //builder pattern, one of the design patterns in OOP
        //instead of having too many different constructors
        //we can use builder pattern and chain with{preopertyName} methods to specify properties of an object
        Spartan spartan1 = new Spartan().
                withGender("Male").
                withName("Some User").
                withPhone(5712134235L);

        Spartan spartan = new Spartan();
        spartan.setGender("Male");//Male or Female
        spartan.setName("Mister Twister");
        spartan.setPhone(5712134235L); //at least 10 digits

        Response response = given().
                contentType(ContentType.JSON).
                body(spartan).
                when().
                post("/spartans");
        assertEquals(201, response.getStatusCode(), "Status code is wrong!");
        assertEquals("application/json", response.getContentType(), "Content type is invalid!");
        assertEquals(response.jsonPath().getString("success"), "A Spartan is Born!");

        response.prettyPrint();

        Spartan spartan_from_response = response.jsonPath().getObject("data", Spartan.class);

        System.out.println("Spartan id: " + spartan_from_response.getSpartanId());

//        //delete spartan that you've just created
//        when().delete("/spartans/{id}", spartan_from_response.getSpartanId()).
//                prettyPeek().
//                then().assertThat().statusCode(204);

    }

    @Test
    @DisplayName("Delete user")
    public void test6() {
        int idOfTheUserThatYouWantToDelete = 125;

        Response response = when().delete("/spartans/{id}", idOfTheUserThatYouWantToDelete);

        response.prettyPeek();
    }

    @Test
    @DisplayName("Delete half of the records")
    public void test7() {
        int idOfTheUserThatYouWantToDelete = 125;
        Response response = given().
                accept(ContentType.JSON).
                when().
                get("/spartans");
        //I collected all user id's
        List<Integer> userIDs = response.jsonPath().getList("id");

        //I sorted user id's in descending order
        Collections.sort(userIDs, Collections.reverseOrder());
        System.out.println("Before: " + userIDs);

        //I went through half of the collection, and deleted half of the users
        //userIDs.size()/2 - represents half of the spartans
        for (int i = 0; i < userIDs.size() / 2; i++) {
            //will delete spartan based on id that you specify
            when().delete("/spartans/{id}", userIDs.get(i));
        }

//        Response response2 = when().delete("/spartans/{id}", idOfTheUserThatYouWantToDelete);
//
//        response.prettyPeek();
    }

    //    "Phone number should be at least 10 digit and UNIQUE!!",
    @Test
    @DisplayName("Add 10 test users to Spartan app")
    public void test8() {
        Faker faker = new Faker();
        for (int i = 0; i < 10; i++) {
            Spartan spartan = new Spartan();

            spartan.setName(faker.name().firstName());
            //remove all non-digits
            // replaceAll() < takes regex (regular expression)
            // regex - it's a pattern, means that 1 character can represent group of chars/symbols/digits
            // \\D - everything that is not a digit (0-9)

            String phone = faker.phoneNumber().subscriberNumber(11).replaceAll("\\D", "");
//           phone.matches("\\d"); check if this string contains only digits
//           phone.matches("[a-x]"); check if this string contains letters in the range from a to x
            //convert from String to Long
            spartan.setPhone(Long.parseLong(phone));

            spartan.setGender("Female");

            System.out.println(spartan);

            Response response = given().
                                    contentType(ContentType.JSON).
                                    body(spartan).
                                when().
                                    post("/spartans").prettyPeek();

             //whenever you successfully add new spartan, you will get this message: "A Spartan is Born!",
            System.out.println(response.jsonPath().getString("success"));
            //verify that response status code is 201,
            //in our case 201 means that post request went well
            assertEquals(201, response.getStatusCode());

        }
    }


    @Test
    @DisplayName("Update spartan")
    public void test9() {
       Spartan spartan = new Spartan().
                               withGender("Male").
                               withName("Guru of Java").
                               withPhone(9999999999L);

       Response response = given().
                                accept(ContentType.JSON).
                                contentType(ContentType.JSON).
                                body(spartan).
               pathParam("id", 380).
                            put("/spartans/{id}").prettyPeek();
       //put update existing record
      // also when you make PUT request, you need to specify entire body
       //post - create new one
        //we never POST/PUT id, it must be auto generated
        //if it's not like this - it's a bug

        // contentType(ContentType.JSON) in the given()
        // you tell to the web service, what data you are sending
    }

    @Test
    @DisplayName("Update only name with PATCH")
    public void test10(){
         Map<String, Long> update = new HashMap<>();
         update.put("phone", 10000000000L);

         Response response = given().
                                accept(ContentType.JSON).
                                contentType(ContentType.JSON).
                                body(update).
                                pathParam("id", 381).
                            patch("/spartans/{id}");

         response.prettyPrint();
     //POST - add new spartan
     //PUT - update existing one, but you have to specify all properties
     //PATCH - update existing one, but ypu may specify one or more properties to update


    }

}




